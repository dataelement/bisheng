# 数据库配置
database_url:
  "mysql+pymysql://root:1234@mysql:3306/bisheng?charset=utf8mb4"
redis_url:
  "redis:6379"

# admin 用户配置
admin:
  user_name: "admin"
  password: "1234"

# bisheng-rt: 
#   name: "RT-Server"
#   server: "RT服务器IP:9001"


knowledges: # 知识库相关配置
  unstructured_api_url: ""  # 毕昇非结构化数据解析服务地址，提供包括OCR文字识别、表格识别、版式分析等能力。非必填，填写后能够提升PDF、图片、 
  embeddings: # 配置知识库的embedding服务，以下示例填写了两类embedding服务的配置方法，第一个是openai的embedding模型服务的配置方法，第二个是本地部署的embedding模型服务的配置方法，如果有多个可以添加多个
    text-embedding-ada-002: # 知识库下拉框中显示的embedding模型的名称，可自定义
      openai_api_base: "https://api.openai.com/v1"
      openai_proxy: "" # 如果是自己代理的服务地址，则填在这里
      openai_api_key: "" # 私有的，openai账号的key
    embedding-host: # 知识库下拉框中显示的embedding模型的名称，可自定义
      host_base_url: "" # 在模型管理页面中已上线的embedding服务的地址
      model: "" # 在模型管理页面中已上线的embedding模型的名称
  vectorstores:
    # Milvus 最低要求cpu 4C 8G 推荐4C 16G
    Milvus: # 如果需要切换其他vectordb，确保其他服务已经启动，然后配置对应参数
      connection_args: {'host': '110.16.193.170', 'port': '50032', 'user': '', 'password': '', 'secure': False}
    # 可选配置，有些类型的场景使用ES可以提高召回效果
    ElasticKeywordsSearch:
      elasticsearch_url: ''
      ssl_verify: "{'ca_certs': False, 'basic_auth': ('elastic', 'password'), 'verify_certs': False}"
  minio: # 如果要支持溯源功能，由于溯源会展示源文件，必须配置 oss 存储
    MINIO_ENDPOINT: ""
    MINIO_SHAREPOIN: ""
    MINIO_ACCESS_KEY: ""
    MINIO_SECRET_KEY: ""

# 全局配置大模型    
default_llm: # 可选配置。BISHENG系统中有些功能需要使用大模型的能力，当前问答溯源功能中会用到，未来还会有其他功能会使用到。在问答溯源功能中，使用大语言模型自动从答案中提取关键词，来帮助用户快速定位到答案的可能来源段落，如果这里没有配置，则会使用jieba分词来输出答案中的关键词。
  model: "" # 在模型管理页面中已上线的大模型服务的名称
  host_base_url: "" # 在模型管理页面中已上线的大模型服务的地址

agents:
  ZeroShotAgent:
    documentation: "https://python.langchain.com/docs/modules/agents/how_to/custom_mrkl_agent"
  JsonAgent:
    documentation: "https://python.langchain.com/docs/modules/agents/toolkits/openapi"
  CSVAgent:
    documentation: "https://python.langchain.com/docs/modules/agents/toolkits/csv"
  AgentInitializer:
    documentation: "https://python.langchain.com/docs/modules/agents/agent_types/"
  VectorStoreAgent:
    documentation: ""
  VectorStoreRouterAgent:
    documentation: ""
  SQLAgent:
    documentation: ""
chains:
  SequentialChain:
    documentation: ""
  LLMChain:
    documentation: "https://python.langchain.com/docs/modules/chains/foundational/llm_chain"
  LLMMathChain:
    documentation: "https://python.langchain.com/docs/modules/chains/additional/llm_math"
  LLMCheckerChain:
    documentation: "https://python.langchain.com/docs/modules/chains/additional/llm_checker"
  ConversationChain:
    documentation: ""
  SeriesCharacterChain:
    documentation: ""
  MidJourneyPromptChain:
    documentation: ""
  TimeTravelGuideChain:
    documentation: ""
  SQLDatabaseChain:
    documentation: ""
  RetrievalQA:
    documentation: "https://python.langchain.com/docs/modules/chains/popular/vector_db_qa"
  RetrievalQAWithSourcesChain:
    documentation: ""
  ConversationalRetrievalChain:
    documentation: "https://python.langchain.com/docs/modules/chains/popular/chat_vector_db"
  CombineDocsChain:
    documentation: ""
documentloaders:
  AirbyteJSONLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/airbyte_json"
  CoNLLULoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/conll-u"
  CSVLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/csv"
  EverNoteLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/evernote"
  FacebookChatLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/facebook_chat"
  GutenbergLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/gutenberg"
  BSHTMLLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/html"
  PyPDFDirectoryLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf"
  PyPDFLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/pdf"
  SRTLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/subtitle"
  TelegramChatLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/telegram"
  TextLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/"
  WebBaseLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/web_base"
  AZLyricsLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/azlyrics"
  CollegeConfidentialLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/college_confidential"
  HNLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/hacker_news"
  IFixitLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/ifixit"
  IMSDbLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/imsdb"
  GitbookLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/gitbook"
  ReadTheDocsLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/readthedocs_documentation"
  SlackDirectoryLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/slack"
  NotionDirectoryLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/notion"
  DirectoryLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/how_to/file_directory"
  GitLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/git"
  PDFWithSemanticLoader:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/git"
embeddings:
  OpenAIEmbeddings:
    documentation: "https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/openai"
  HuggingFaceEmbeddings:
    documentation: "https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/sentence_transformers"
  CohereEmbeddings:
    documentation: "https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/cohere"
  WenxinEmbeddings:
    documentation: ""
  HostEmbeddings:
    documentation: ""
llms:
  AzureChatOpenAI:
    documentation: ""
  OpenAI:
    documentation: "https://python.langchain.com/docs/modules/model_io/models/llms/integrations/openai"
  ChatOpenAI:
    documentation: "https://python.langchain.com/docs/modules/model_io/models/chat/integrations/openai"
  LlamaCpp:
    documentation: "https://python.langchain.com/docs/modules/model_io/models/llms/integrations/llamacpp"
  CTransformers:
    documentation: "https://python.langchain.com/docs/modules/model_io/models/llms/integrations/ctransformers"
  Cohere:
    documentation: "https://python.langchain.com/docs/modules/model_io/models/llms/integrations/cohere"
  Anthropic:
    documentation: ""
  ChatAnthropic:
    documentation: "https://python.langchain.com/docs/modules/model_io/models/chat/integrations/anthropic"
  HuggingFaceHub:
    documentation: "https://python.langchain.com/docs/modules/model_io/models/llms/integrations/huggingface_hub"
  VertexAI:
    documentation: "https://python.langchain.com/docs/modules/model_io/models/llms/integrations/google_vertex_ai_palm"
  ProxyChatLLM:
    documentation: ""
  ChatMinimaxAI:
    documentation: ""
  ChatWenxin:
    documentation: ""
  ChatZhipuAI:
    documentation: ""
  ChatXunfeiAI:
    documentation: ""
  Llama2Chat:
    documentation: ""
  ChatGLM2Host:
    documentation: ""
  BaichuanChat:
    documentation: ""
  QwenChat:
    documentation: ""
  ###
  # There's a bug in this component deactivating until we get it sorted: _language_models.py", line 804, in send_message
  #     is_blocked=safety_attributes.get("blocked", False),
  # AttributeError: 'list' object has no attribute 'get'
  # ChatVertexAI:
  #   documentation: "https://python.langchain.com/docs/modules/model_io/models/chat/integrations/google_vertex_ai_palm"
  ###
memories:
  # https://github.com/supabase-community/supabase-py/issues/482
  # ZepChatMessageHistory:
  #   documentation: "https://python.langchain.com/docs/modules/memory/integrations/zep_memory"
  ConversationEntityMemory:
    documentation: "https://python.langchain.com/docs/modules/memory/integrations/entity_memory_with_sqlite"
  # https://github.com/hwchase17/langchain/issues/6091
  # SQLiteEntityStore:
  #   documentation: "https://python.langchain.com/docs/modules/memory/integrations/entity_memory_with_sqlite"
  PostgresChatMessageHistory:
    documentation: "https://python.langchain.com/docs/modules/memory/integrations/postgres_chat_message_history"
  ConversationBufferMemory:
    documentation: "https://python.langchain.com/docs/modules/memory/how_to/buffer"
  ConversationSummaryMemory:
    documentation: "https://python.langchain.com/docs/modules/memory/how_to/summary"
  ConversationKGMemory:
    documentation: "https://python.langchain.com/docs/modules/memory/how_to/kg"
  ConversationBufferWindowMemory:
    documentation: "https://python.langchain.com/docs/modules/memory/how_to/buffer_window"
  VectorStoreRetrieverMemory:
    documentation: "https://python.langchain.com/docs/modules/memory/how_to/vectorstore_retriever_memory"
  MongoDBChatMessageHistory:
    documentation: "https://python.langchain.com/docs/modules/memory/integrations/mongodb_chat_message_history"
prompts:
  ChatMessagePromptTemplate:
    documentation: "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/msg_prompt_templates"
  HumanMessagePromptTemplate:
    documentation: "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts"
  SystemMessagePromptTemplate:
    documentation: "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts"
  ChatPromptTemplate:
    documentation: "https://python.langchain.com/docs/modules/model_io/models/chat/how_to/prompts"
  PromptTemplate:
    documentation: "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/"
textsplitters:
  CharacterTextSplitter:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter"
  RecursiveCharacterTextSplitter:
    documentation: "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/recursive_text_splitter"
toolkits:
  OpenAPIToolkit:
    documentation: ""
  JsonToolkit:
    documentation: ""
  VectorStoreInfo:
    documentation: ""
  VectorStoreRouterToolkit:
    documentation: ""
  VectorStoreToolkit:
    documentation: ""
tools:
  Search:
    documentation: ""
  PAL-MATH:
    documentation: ""
  Calculator:
    documentation: ""
  Serper Search:
    documentation: ""
  Tool:
    documentation: ""
  PythonFunctionTool:
    documentation: ""
  PythonFunction:
    documentation: ""
  JsonSpec:
    documentation: ""
  News API:
    documentation: ""
  TMDB API:
    documentation: ""
  Podcast API:
    documentation: ""
  QuerySQLDataBaseTool:
    documentation: ""
  InfoSQLDatabaseTool:
    documentation: ""
  ListSQLDatabaseTool:
    documentation: ""
  BingSearchRun:
    documentation: ""
  GoogleSearchRun:
    documentation: ""
  GoogleSearchResults:
    documentation: ""
  GoogleSerperRun:
    documentation: ""
  JsonListKeysTool:
    documentation: ""
  JsonGetValueTool:
    documentation: ""
  PythonREPLTool:
    documentation: ""
  PythonAstREPLTool:
    documentation: ""
  RequestsGetTool:
    documentation: ""
  RequestsPostTool:
    documentation: ""
  RequestsPatchTool:
    documentation: ""
  RequestsPutTool:
    documentation: ""
  RequestsDeleteTool:
    documentation: ""
  WikipediaQueryRun:
    documentation: ""
  WolframAlphaQueryRun:
    documentation: ""
utilities:
  BingSearchAPIWrapper:
    documentation: ""
  GoogleSearchAPIWrapper:
    documentation: ""
  GoogleSerperAPIWrapper:
    documentation: ""
  SearxResults:
    documentation: ""
  SearxSearchWrapper:
    documentation: ""
  SerpAPIWrapper:
    documentation: ""
  WikipediaAPIWrapper:
    documentation: ""
  WolframAlphaAPIWrapper:
    documentation: ""
retrievers:
  MultiVectorRetriever:
    documentation: ""
  MultiQueryRetriever:
    documentation: "https://python.langchain.com/docs/modules/data_connection/retrievers/how_to/MultiQueryRetriever"
  # https://github.com/supabase-community/supabase-py/issues/482
  # ZepRetriever:
  #   documentation: "https://python.langchain.com/docs/modules/data_connection/retrievers/integrations/zep_memorystore"
vectorstores:
  ElasticKeywordsSearch:
    documentation: "http://192.168.106.116:8030"
  Milvus:
    documentation: "http://192.168.106.116:8030"
  Chroma:
    documentation: "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/chroma"
  Qdrant:
    documentation: "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/qdrant"
  Weaviate:
    documentation: "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/weaviate"
  FAISS:
    documentation: "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/faiss"
  Pinecone:
    documentation: "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/pinecone"
  SupabaseVectorStore:
    documentation: "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/supabase"
  MongoDBAtlasVectorSearch:
    documentation: "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/mongodb_atlas"
  # Requires docarray >=0.32.0 but langchain-serve requires jina 3.15.2 which doesn't support docarray >=0.32.0
  # DocArrayInMemorySearch:
  #   documentation: "https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/docarray_in_memory"
wrappers:
  RequestsWrapper:
    documentation: ""
  SQLDatabase:
    documentation: ""
output_parsers:
  StructuredOutputParser:
    documentation: "https://python.langchain.com/docs/modules/model_io/output_parsers/structured"
  ResponseSchema:
    documentation: "https://python.langchain.com/docs/modules/model_io/output_parsers/structured"
  
input_output:
  Input:
    documentation: ""
  Output:
    documentation: ""
  InputFile:
    documentation: ""


